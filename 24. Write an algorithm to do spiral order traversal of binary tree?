import java.util.Stack;
class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
        }
    }
public class SpiralOrder{
    public void checkOrder(Node root){
       Stack<Node> s1 = new Stack<>();
       Stack <Node> s2 = new Stack<>();
       s1.push(root);
       
       while(!s1.isEmpty() || !s2.isEmpty()){
           while(!s1.isEmpty()){
               Node n = s1.pop();
               System.out.print(n.data+" ");
               if(n.left  != null){
               s2.push(n.left );}
               if(n.right != null){
               s2.push(n.right);}
           }
           while(!s2.isEmpty()){
               Node n = s2.pop();
               System.out.print(n.data+" ");
               if(n.right != null){
                   s1.push(n.right);
               }
               if(n.left  != null){
                   s1.push(n.left);
               }
               
           }
       }
       
    }
    
    public Node tree(){
        Node root = new Node(40);
        Node n1 = new Node(20);
        Node n2 = new Node(30);
        Node n3 = new Node(10);
        Node n4 = new Node(15);
        Node n5 = new Node(20);
        
        root.left = n1;
        root.right = n2;
        
        n1.left = n3;
        n1.right = n4;
        
        n2.right = n5;
        
        return root;
    }
    
    public static void main(String[] args){
        SpiralOrder l = new SpiralOrder();
        Node n = l.tree();
        l.checkOrder(n);
    }
    
    
}
------------
Output:
40 30 20 10 15 20
