class Node{
    char data;
    Node next;
}
class LinkedList {
    Node head;
    int count=0;
    
    public void insert(char n){
        Node node = new Node();
        node.data = n;
        node.next = null;
        if(head == null){
            head = node;
        }
        else{
            Node nextNode = head;
            while(nextNode.next != null){
                nextNode = nextNode.next;
            }
            nextNode.next = node;
        }
        count++;
    }
    
    public void show(){
        Node nextNode = head;
        while(nextNode.next != null){
            System.out.print(nextNode.data+" ");
            nextNode = nextNode.next;
        }
        System.out.print(nextNode.data);
    }
    
    public int countNodes(){
        return count;
    }
    
    public void insertAtStart(char n){
        Node node = new Node();
        node.data = n;
        node.next = null;
        
        if(head == null){
            head = node;
        }
        else{
            node.next = head;
            head = node;
        }
        count++;
    }
    
    public void insertAt(int index, char n){
        Node node = new Node();
        node.data = n;
        node.next = null;
        if(index >= count){
        System.out.println("Index is out of range");
        }
        else if(index == 0){
            insertAtStart(n);
        }
        else{
            
            Node nextNode = head;
            for(int i=0;i<index-1;i++){
            nextNode = nextNode.next;
            }
            node.next = nextNode.next;
            nextNode.next = node;
            count++;
        }
        
    }
    
    public void deleteAt(int index){
        if(head == null){
            System.out.println("List has no elemnets");
        }
        else{
            Node nextNode = head;
            for(int i=0;i<index-1;i++){
                nextNode = nextNode.next;
            }
            Node temp = nextNode.next;
            nextNode.next = temp.next;
            temp = null;
            count--;
        }
    }
    
    public void reverse(){
        head = reverseFunction(head);
        System.out.println(head.data);
    }
    
    private Node reverseFunction(Node node){   // Recursive
        if(node == null || node.next == null){
            return node;
        }
        Node temp = reverseFunction(node.next);
        node.next.next = node;
        node.next = null;
        return temp;
    }
    
    public void checkPalindrome(){
        System.out.println(palindrome(head)+" is palindrome");
    }
    
    public boolean palindrome(Node head){
        Node p = head;
        Node q = head;
        Node start_second;
        while(true){    // loop runs until q reaches end of list
            q = q.next.next;
            if(q == null){
                start_second = p.next;
                break;
            }
            if(q.next == null){
                start_second = p.next.next;
                break;
            }
            p = p.next;
        }
        p.next = null;
        start_second = reverseFunction(start_second);
        return compare(head,start_second);
    }
    
    public boolean compare(Node n1, Node n2){   // compare two lists
        while(n1!=null && n2!=null){
            if(n1.data == n2.data){
                n1 = n1.next;
                n2 = n2.next;
            }
            else{
                return false;
            }
        }
        return true;
    }
    
}

public class Runner{
    public static void main(String[] args){
        LinkedList l = new LinkedList();
        l.insert('a');
    l.insert('b');
    l.insert('c');
    l.insert('d');
    l.insert('c');
    l.insert('b');
    l.insert('a');
    System.out.println(l.countNodes());
    l.show();
    System.out.println();
    l.checkPalindrome();
    l.show();
    }
}

------
Inputs can be ODD or Even like - abcdcba or abcddcba
Output: 
7
a b c d c b a
true is palindrome
a b c
-----
7
a b d d c b a
false is palindrome
a b d
