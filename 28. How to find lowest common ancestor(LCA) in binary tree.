class Node{
        int data;
        Node left;
        Node right;
        Node(int data){
            this.data = data;
        }
    }
    
public class Ancesstor{
    
    public Node LCA(Node root, int p ,int q){
        if(root == null){
            return null;
        }
        if(root.data == p || root.data == q){
            return root;
        }
        
        Node left = LCA(root.left,p,q);
        Node right = LCA(root.right, p,q);
        if(left != null && right != null){
            return root;
        }
        else{
            return (left != null ? left:right);
        }
    }
    
    
    
    public Node tree(){
        Node root = new Node(40);
        Node n1 = new Node(25);
        Node n2 = new Node(30);
        Node n3 = new Node(10);
        Node n4 = new Node(15);
        Node n5 = new Node(20);
        
        root.left = n1;
        root.right = n2;
        
        n1.left = n3;
        n1.right = n4;
        
        n2.right = n5;
        
        return root;
    }
    
    public static void main(String[] args){
        Ancesstor a = new Ancesstor();
        Node n = a.LCA(a.tree(),10,15);
        System.out.println(n.data);
    }
    
}
----------------
25
