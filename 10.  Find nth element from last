class Node{
    int data;
    Node next;
}
class LinkedList {
    Node head;
    int count=0;
    
    public void insert(int n){
        Node node = new Node();
        node.data = n;
        node.next = null;
        if(head == null){
            head = node;
        }
        else{
            Node nextNode = head;
            while(nextNode.next != null){
                nextNode = nextNode.next;
            }
            nextNode.next = node;
        }
        count++;
    }
    
    public void show(){
        Node nextNode = head;
        while(nextNode.next != null){
            System.out.print(nextNode.data+" ");
            nextNode = nextNode.next;
        }
        System.out.print(nextNode.data);
    }
    
    public int countNodes(){
        return count;
    }
    
    public void insertAtStart(int n){
        Node node = new Node();
        node.data = n;
        node.next = null;
        
        if(head == null){
            head = node;
        }
        else{
            node.next = head;
            head = node;
        }
        count++;
    }
    
    public void insertAt(int index, int n){
        Node node = new Node();
        node.data = n;
        node.next = null;
        if(index >= count){
        System.out.println("Index is out of range");
        }
        else if(index == 0){
            insertAtStart(n);
        }
        else{
            
            Node nextNode = head;
            for(int i=0;i<index-1;i++){
            nextNode = nextNode.next;
            }
            node.next = nextNode.next;
            nextNode.next = node;
            count++;
        }
        
    }
    
    public void deleteAt(int index){
        if(head == null){
            System.out.println("List has no elemnets");
        }
        else{
            Node nextNode = head;
            for(int i=0;i<index-1;i++){
                nextNode = nextNode.next;
            }
            Node temp = nextNode.next;
            nextNode.next = temp.next;
            temp = null;
            count--;
        }
    }
    
    public void reverse(){
        head = reverseFunction(head);
        System.out.println(head.data);
    }
    
    private Node reverseFunction(Node node){   // Recursive
        if(node == null || node.next == null){
            return node;
        }
        Node temp = reverseFunction(node.next);
        node.next.next = node;
        node.next = null;
        return temp;
    }
    
    public void nthElementLast(int n){
        Node node = nthElement(head,n);
        System.out.println(node.data);
    }
    
    private Node nthElement(Node head, int n){
        Node p = head;
        Node f = head;
        count = 1;
        while(count<=n-1){
            f = f.next;
            count++;
        }
        while(f.next != null){
            p = p.next;
            f = f.next;
        }
        return p;
    }
    
}

public class Runner{
    public static void main(String[] args){
        LinkedList l = new LinkedList();
        l.insert(10);
    l.insert(20);
    l.insert(30);
    l.insert(50);
    l.insert(60);
    l.insertAtStart(70);
    l.insertAtStart(7);
    l.insertAt(2,42);
    l.insertAt(0,52);
    System.out.println(l.countNodes());
    l.show();
    System.out.println();
    l.reverse();
    l.show();
    System.out.println();
    l.nthElementLast(6);
    }
}
--------
output:
9
52 7 70 42 10 20 30 50 60
60
60 50 30 20 10 42 70 7 52
20 // 6th element from last
